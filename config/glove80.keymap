
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Base 0
#define LAYER_Numbers 1
#define LAYER_Navigation 2
#define LAYER_Symbols 3
#define LAYER_LeftNumbers 4
#define LAYER_Magic 5
#define LAYER_Lower 6

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */



/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Custom Defined Behaviors */
/ {
    behaviors {
        ctx_a: context_a {
            compatible = "zmk,behavior-antecedent-morph";
            label = "CONTEXT_SENSITIVE_KEY_A";
            #binding-cells = <0>;
            defaults = <&kp GLOBE>;
            antecedents = <     S     Z     V     T     M     R     L     W     D     G     C     Y     K     J     X     B     P     N     F     H     E     O     I     U     A     Q >;
            bindings    = < &kp Z &kp S &kp S &kp M &kp T &kp L &kp R &kp R &kp G &kp D &kp D &kp K &kp Y &kp Y &kp P &kp H &kp F &kp F &kp N &kp N &kp O &kp E &kp U &kp I &kp Q &kp A >;
            max-delay-ms = <1000>;
        };
        ctx_b: context_b {
            compatible = "zmk,behavior-antecedent-morph";
            label = "CONTEXT_SENSITIVE_KEY_B";
            #binding-cells = <0>;
            defaults = <&none>;
            antecedents = <     S     Z     V     R     L     W     D     G     C     Y     K     J     X     B     P     N     F    >;
            bindings    = < &kp V &kp V &kp Z &kp W &kp W &kp L &kp C &kp C &kp G &kp J &kp J &kp K &kp B &kp X &kp B &kp H &kp H &kp>;
            max-delay-ms = <1000>;
        };
   };
};

/* Automatically generated macro definitions */
/ {
    macros {
    
        // ~
        tilde: tilde {
            label = "&TILDE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(N)>
                , <&kp SPACE>;
        };
    
        // ^
        circum: circum {
            label = "&CIRCUM";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp NON_US_BSLH>
                , <&kp SPACE>;
        };
    
        // `
        bcktck: bcktck {
            label = "&BCKTCK";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(EQUAL)>
                , <&kp SPACE>;
        };
    
        // Â´
        fwtck: fwtck {
            label = "&FWTCK";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>
                , <&kp SPACE>;
        };
    };
};

/* Automatically generated behavior definitions */
/ {
    behaviors {

        // Modifier Hold-tap Doublebindings
        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            quick-tap-ms = <150>;
            require-prior-idle-ms = <75>;
        };

        // Shift Hold-tap Tilde
        shft_tilde: shft_tilde {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&tilde>;
            flavor = "balanced";
            quick-tap-ms = <150>;
            require-prior-idle-ms = <75>;
        };
    };
};

/* Automatically generated combos definitions */


/* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
               &kp F2       &kp F3  &kp F4   &kp F5  &kp F6                                                                                                         &kp F7    &kp F8    &kp F9          &kp F10      &kp F11
               &kp F1    &kp MINUS   &none  &kp TAB   &none   &none                                                                                      &none     &kp SQT  &kp SEMI  &kp LBKT        &kp MINUS      &kp F12
           &caps_word        &kp V   &kp M    &kp L   &kp C   &kp K                                                                                      &kp X       &kp F     &kp O     &kp U            &kp Q        &none
          &key_repeat  &ht LSHFT S   &kp T    &kp R   &kp D   &kp Z                                                                                      &kp B       &kp N     &kp E     &kp I      &ht RSHFT A  &key_repeat
              &kp ESC  &ht LCTRL Y  &ctx_a    &kp W   &kp G   &kp J  &ht LGUI TAB  &ht LALT DEL      &mo 4      &none      &kp LALT  &ht RGUI RS(BSLH)   &kp P       &kp H  &kp FSLH    &ctx_a  &ht RCTRL COMMA        &none
 &magic LAYER_Magic 0        &none  &ctx_b    &none   &none           &lt 3 SPACE    &lt 1 BSPC  &kp GLOBE  &kp GLOBE  &ht RGUI DOT          &lt 2 RET          &kp RS(N7)  &kp RBKT    &ctx_b            &none        &none
            >;
        };

        layer_Numbers {
            bindings = <
 &kp F14          &kp F15    &kp F16    &kp F17    &kp F18                                                                                       &kp F19  &kp F20       &kp F21     &kp F22  &kp F23
 &kp F13            &none  &kp LG(H)  &kp LG(N)  &kp LG(O)  &kp LG(P)                                                             &none            &kp X    &kp Z         &kp Y  &kp RS(N4)  &kp F24
   &none            &none  &kp LG(Q)  &kp LG(W)      &none      &none                                                        &kp RS(N5)           &kp N7   &kp N8        &kp N9   &kp RA(E)    &none
  &trans        &kp LSHFT  &kp LG(A)  &kp LG(S)  &kp LG(D)  &kp LG(F)                                                          &kp RBKT           &kp N4   &kp N5        &kp N6     &kp DOT   &trans
  &trans  &ht LCTRL LG(Z)  &kp LG(Y)  &kp LG(X)  &kp LG(C)  &kp LG(V)   &none   &none   &none   &none  &ht LALT TAB  &trans    &kp FSLH           &kp N1   &kp N2        &kp N3   &kp COMMA    &none
   &none          &kp DEL    &kp TAB   &kp BSPC  &kp SPACE              &none   &none   &none  &trans        &trans  &trans              &kp KP_MULTIPLY   &kp N0  &kp KP_SLASH       &none    &none
            >;
        };

        layer_Navigation {
            bindings = <
  &none      &none   &none   &none   &none                                                                           &none      &none       &none      &none   &none
  &none      &none   &none   &none   &none   &none                                                    &none          &none      &none       &none      &none   &none
  &none      &none   &none   &none   &none   &none                                                    &none  &kp K_FORWARD    &kp RET  &kp K_BACK      &none   &none
 &trans  &kp LSHFT   &none   &none   &none   &none                                                  &kp RET       &kp LEFT   &kp DOWN      &kp UP  &kp RIGHT  &trans
 &trans  &kp LCTRL   &none   &none   &none   &none  &trans  &trans   &none   &none   &none   &none    &none       &kp HOME  &kp PG_DN   &kp PG_UP    &kp END   &none
  &none      &none   &none   &none   &none          &trans  &trans  &trans   &none   &none   &none                   &none      &none       &none      &none   &none
            >;
        };

        layer_Symbols {
            bindings = <
 &kp F14                              &kp F15              &kp F16     &kp F17     &kp F18                                                                                                   &kp F19       &kp F20        &kp F21               &kp F22  &kp F23
 &kp F13                                &none  &kp LS(NON_US_BSLH)  &kp LS(N6)  &kp LS(N3)         &fwtck                                                                        &none     &kp EQUAL     &kp GRAVE  &kp RS(EQUAL)                 &none  &kp F24
   &none                                &none           &kp LS(N8)  &kp LS(N9)  &kp LS(N2)   &kp LS(BSLH)                                                                      &bcktck  &kp RS(FSLH)      &kp RBKT       &kp FSLH                 &none    &none
  &trans  &shft_tilde LSHFT MACRO_PLACEHOLDER            &kp GRAVE    &kp FSLH  &kp LS(N0)  &kp LS(GRAVE)                                                                &kp RS(COMMA)    &kp RS(N0)   &kp RS(DOT)     &kp RS(N1)       &ht RSHFT RA(L)   &trans
  &trans                     &ht LCTRL LA(N7)        &kp LS(MINUS)    &kp BSLH  &kp LA(N8)     &kp LA(N9)   &none   &none   &none   &none  &ht LALT TAB  &ht RGUI SPACE     &kp RA(N6)    &kp RA(N5)  &kp RS(RBKT)     &kp RS(N7)  &ht RCTRL RS(RA(N7))    &none
   &none                              &kp DEL              &kp TAB    &kp BSPC   &kp SPACE                  &none   &none   &none  &trans        &trans          &trans                      &circum    &kp RS(N5)     &kp RS(N4)             &kp SPACE    &none
            >;
        };

        layer_LeftNumbers {
            bindings = <
  &none       &none         &none   &none            &none                                                                       &none   &none   &none   &none   &none
  &none  &kp LS(N4)         &kp X   &kp Z            &kp Y       &none                                                   &none   &none   &none   &none   &none   &none
  &none   &kp LA(E)        &kp N7  &kp N8           &kp N9  &kp LS(N5)                                                   &none   &none   &none   &none   &none   &none
 &trans     &kp DOT        &kp N4  &kp N5           &kp N6    &kp RBKT                                                   &none   &none   &none   &none   &none  &trans
  &none   &kp COMMA        &kp N1  &kp N2           &kp N3    &kp FSLH   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none
  &none       &none  &kp KP_SLASH  &kp N0  &kp KP_MULTIPLY               &none   &none   &none   &none   &none   &none           &none   &none   &none   &none   &none
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

        layer_Lower {
            bindings = <
         &kp C_BRI_DN  &kp C_BRI_UP      &kp C_PREV      &kp C_NEXT         &kp C_PP                                                                                    &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none  &kp PAUSE_BREAK
               &trans         &none           &none           &none            &none   &kp HOME                                                   &kp LEFT_PARENTHESIS  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
               &trans         &none           &none    &kp UP_ARROW            &none    &kp END                                                  &kp RIGHT_PARENTHESIS   &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS   &kp SCROLLLOCK
               &trans         &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_UP                                                            &kp PERCENT   &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS            &none
               &trans     &kp K_APP           &none         &kp F11          &kp F12  &kp PG_DN  &trans  &trans   &to 0  &trans  &trans  &trans              &kp COMMA   &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER           &trans
 &magic LAYER_Magic 0      &kp CAPS         &kp INS         &kp F11          &kp F12             &trans  &trans  &trans  &trans  &trans  &trans                          &kp KP_N0     &kp KP_N0    &kp KP_DOT     &kp KP_ENTER           &trans
            >;
        };

    };
};
